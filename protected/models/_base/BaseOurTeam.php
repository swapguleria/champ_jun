<?php

 
/**
 * This is the model base class for the table "{{our_team}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "OurTeam".
 *
 * Columns in table "{{our_team}}" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $name
 * @property string $designation
 * @property string $facebook
 * @property string $twitter
 * @property string $linkedin
 * @property string $google_plus
 * @property string $image
 * @property string $description
 * @property integer $state_id
 * @property integer $type_id
 * @property string $create_time
 * @property string $update_time
 * @property integer $create_user_id
 *
 */
abstract class BaseOurTeam extends GxActiveRecord {

	
	public static function getStatusOptions($id = null)
	{
		$list = array("Draft","Published","Archive");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}	
	public static function getTypeOptions($id = null)
	{
		$list = array("TYPE1","TYPE2","TYPE3");
		if ($id == null )	return $list;
		if ( is_numeric( $id )) return $list [ $id ];
		return $id;
	}
 	public function beforeValidate()
	{
		if($this->isNewRecord)
		{
			if ( !isset( $this->create_time )) $this->create_time = date( 'Y-m-d H:i:s');
				if ( !isset( $this->create_user_id )) $this->create_user_id = Yii::app()->user->id;			
	}else{
					}
		return parent::beforeValidate();
	}

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return '{{our_team}}';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Our Team|Our Teams', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('name, designation, facebook, twitter, linkedin, google_plus, image, description,  create_time, create_user_id', 'required'),
			array('state_id, type_id, create_user_id', 'numerical', 'integerOnly'=>true),
			array('name, designation, facebook, twitter, linkedin, google_plus, image, description', 'length', 'max'=>255),
			array('id, name, designation, facebook, twitter, linkedin, google_plus, image, description, state_id, type_id, create_time, update_time, create_user_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'name' => Yii::t('app', 'Name'),
			'designation' => Yii::t('app', 'Designation'),
			'facebook' => Yii::t('app', 'Facebook'),
			'twitter' => Yii::t('app', 'Twitter'),
			'linkedin' => Yii::t('app', 'Linkedin'),
			'google_plus' => Yii::t('app', 'Google Plus'),
			'image' => Yii::t('app', 'Image'),
			'description' => Yii::t('app', 'Description'),
			'state_id' => Yii::t('app', 'State'),
			'type_id' => Yii::t('app', 'Type'),
			'create_time' => Yii::t('app', 'Create Time'),
			'update_time' => Yii::t('app', 'Update Time'),
			'create_user_id' => Yii::t('app', 'Create User'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('designation', $this->designation, true);
		$criteria->compare('facebook', $this->facebook, true);
		$criteria->compare('twitter', $this->twitter, true);
		$criteria->compare('linkedin', $this->linkedin, true);
		$criteria->compare('google_plus', $this->google_plus, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('description', $this->description, true);
		$criteria->compare('state_id', $this->state_id);
		$criteria->compare('type_id', $this->type_id);
		$criteria->compare('create_time', $this->create_time, true);
		$criteria->compare('update_time', $this->update_time, true);
		$criteria->compare('create_user_id', $this->create_user_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}