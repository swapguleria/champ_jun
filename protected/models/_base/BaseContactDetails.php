<?php

/**
 * This is the model base class for the table "{{contact_details}}".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "ContactDetails".
 *
 * Columns in table "{{contact_details}}" available as properties of the model,
 * followed by relations of table "{{contact_details}}" available as properties of the model.
 *
 * @property integer $id
 * @property string $email
 * @property string $phone_no
 * @property string $facebook
 * @property string $twitter
 * @property string $google_plus
 * @property string $instagram
 * @property string $youtube
 * @property string $working_days
 * @property string $working_hours
 * @property string $address
 * @property string $city
 * @property string $country
 * @property integer $zip_code
 * @property string $type_id
 * @property string $state_id
 * @property integer $create_user_id
 * @property string $create_time
 *
 * @property User $createUser
 */
abstract class BaseContactDetails extends GxActiveRecord
    {

    public static function getTypeOptions($id = null)
        {
        $list = array("TYPE1", "TYPE2", "TYPE3");
        if ($id == null) return $list;
        if (is_numeric($id)) return $list [$id];
        return $id;
        }

    public static function getStatusOptions($id = null)
        {
        $list = array("Draft", "Published", "Archive");
        if ($id == null) return $list;
        if (is_numeric($id)) return $list [$id];
        return $id;
        }

    public function beforeValidate()
        {
        if ($this->isNewRecord)
            {
            if (!isset($this->create_user_id)) $this->create_user_id = Yii::app()->user->id;
            if (!isset($this->create_time)) $this->create_time = date('Y-m-d H:i:s');
            }else
            {
            
            }
        return parent::beforeValidate();
        }

    public static function model($className = __CLASS__)
        {
        return parent::model($className);
        }

    public function tableName()
        {
        return '{{contact_details}}';
        }

    public static function label($n = 1)
        {
        return Yii::t('app', 'ContactDetails|ContactDetails', $n);
        }

    public static function representingColumn()
        {
        return 'email';
        }

    public function rules()
        {
        return array(
            array('email,phone_no , facebook, twitter, google_plus, instagram, youtube, working_days, working_hours, address, city, country, zip_code,map', 'required'),
            array('zip_code, create_user_id', 'numerical', 'integerOnly' => true),
            array('email', 'length', 'max' => 128),
            array('phone_no', 'length', 'max' => 11),
            array('facebook, twitter, google_plus,page_title,page_sub_title,page_image, footer_image,instagram, youtube', 'length', 'max' => 255),
            array('working_days, working_hours, address, city, country', 'length', 'max' => 256),
            array('type_id, state_id', 'length', 'max' => 1),
            array('create_time,footer_image,page_title,page_sub_title,page_image, map', 'safe'),
            array('phone_no, type_id, state_id, create_user_id, create_time', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, email, phone_no, facebook, map, twitter, google_plus, instagram, youtube, working_days, working_hours, address, city, country, zip_code, type_id, state_id, create_user_id, create_time', 'safe', 'on' => 'search'),
        );
        }

    public function relations()
        {
        return array(
            'createUser' => array(self::BELONGS_TO, 'User', 'create_user_id'),
        );
        }

    public function pivotModels()
        {
        return array(
        );
        }

    public function attributeLabels()
        {
        return array(
            'id' => Yii::t('app', 'ID'),
            'email' => Yii::t('app', 'Email'),
            'phone_no' => Yii::t('app', 'Phone No'),
            'facebook' => Yii::t('app', 'Facebook'),
            'map' => Yii::t('app', 'Map'),
            'twitter' => Yii::t('app', 'Twitter'),
            'google_plus' => Yii::t('app', 'Google Plus'),
            'instagram' => Yii::t('app', 'Instagram'),
            'youtube' => Yii::t('app', 'Youtube'),
            'working_days' => Yii::t('app', 'Working Days'),
            'working_hours' => Yii::t('app', 'Working Hours'),
            'address' => Yii::t('app', 'Address'),
            'city' => Yii::t('app', 'City'),
            'country' => Yii::t('app', 'Country'),
            'zip_code' => Yii::t('app', 'Zip Code'),
            'type_id' => Yii::t('app', 'Type'),
            'state_id' => Yii::t('app', 'State'),
            'create_user_id' => null,
            'create_time' => Yii::t('app', 'Create Time'),
            'createUser' => null,
        );
        }

    public function search()
        {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('email', $this->email, true);
        $criteria->compare('phone_no', $this->phone_no, true);
        $criteria->compare('facebook', $this->facebook, true);
        $criteria->compare('map', $this->map, true);
        $criteria->compare('twitter', $this->twitter, true);
        $criteria->compare('google_plus', $this->google_plus, true);
        $criteria->compare('instagram', $this->instagram, true);
        $criteria->compare('youtube', $this->youtube, true);
        $criteria->compare('working_days', $this->working_days, true);
        $criteria->compare('working_hours', $this->working_hours, true);
        $criteria->compare('address', $this->address, true);
        $criteria->compare('city', $this->city, true);
        $criteria->compare('country', $this->country, true);
        $criteria->compare('zip_code', $this->zip_code);
        $criteria->compare('type_id', $this->type_id, true);
        $criteria->compare('state_id', $this->state_id, true);
        $criteria->compare('create_user_id', $this->create_user_id);
        $criteria->compare('create_time', $this->create_time, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
        }

    }
